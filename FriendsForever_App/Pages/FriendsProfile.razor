

<!-- Card Narrower -->
<div class="card card-cascade narrower">
    <!-- Card image -->
    <div class="view view-cascade overlay">
        @{
            var profilePhotoPath = (model.ProfilePhotoPath ?? "Microsoft_Default.png");
        }
        <img class="card-img-top img-fluid" src="Images/ProfileImage/@profilePhotoPath"
             alt="Card image cap">
        <a>
            <div class="mask rgba-white-slight"></div>
        </a>
    </div>

    <!-- Card content -->
    <div class="card-body card-body-cascade">

        <!-- Label -->
        <h5 class="pb-2 pt-1"><span style="color:#0078d6"><i class="fas fa-user"></i> @model.Name</span></h5>

        <!-- Title -->
        <p style="font-size: 13px; color:#747373; margin-bottom: 2px"><i class="fas fa-envelope-open-text fa-fw" style="color:#0078d6"></i>&nbsp;@model.Email</p>
        <p style="font-size: 13px; color:#747373; margin-bottom: 2px"><i class="fa fa-home fa-fw" style="color:#0078d6"></i>&nbsp;@model.Country</p>
        <p style="font-size: 13px; color:#747373"><i class="fa fa-birthday-cake fa-fw" style="color:#0078d6"></i>&nbsp;@model.Dob.ToLongDateString()</p>

        <!-- Text -->
        <p class="card-text">
            <h5>Interests</h5>
            @if (model.UserInterests.Any())
            {
                @foreach (var interest in model.UserInterests)
                {
                    <span class="myOwnPills">@interest</span>
                }
            }
            else
            {
                <span class="myOwnPills">No interest added.</span>
            }
        </p>

        @if (checkRequestSentOrNot)
        {
            <!-- Button -->
            <SfButton IsPrimary="true" Content="Send Friend Request" OnClick="AddFriend"></SfButton>
        }
        else{
            <span class="myOwnPills">Already Sent or Freind</span>
        }
    </div>
</div>
<!-- Card Narrower -->

<SfToast @ref="ToastObj" ID="toast_type_friends">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>


@code {
    [Parameter]
    public string FullName { get; set; }
    SfToast ToastObj;
    public UserDashboardViewModel model = new UserDashboardViewModel();
    private IDataProtector dataProtector;
    public bool checkRequestSentOrNot { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dataProtector = dataProtectionProvider.CreateProtector(dataProtectionPurposeStrings.RouteValue);
        var RequestUser = await userService.GetUserByNameAsync(FullName);
        if (RequestUser != null)
        {
            model.Name = RequestUser.FullName;
            model.Dob = RequestUser.Dob;
            model.Country = RequestUser.Country;
            model.Email = RequestUser.Email;
            model.ProfilePhotoPath = RequestUser.ProfilePhotoPath;
            IEnumerable<string> interests = await centerService.FindByIdUserInterestAsync(RequestUser.Id);
            model.UserInterests = interests;

            var SenderUser = await userService.GetUserDetailsAsync();
            var checkRequestModel = new  CheckFriendRequestStatusViewModel{
                RequestId = RequestUser.Id,
                SenderId = SenderUser.Id
            };
            checkRequestSentOrNot = await centerService.CheckFriendRequestSentOrNotAsync(checkRequestModel);
        }
    }

    async Task AddFriend()
    {
        var RequestUser = await userService.GetUserByNameAsync(FullName);
        var SenderUser = await userService.GetUserDetailsAsync();
        var checkRequestModel = new  CheckFriendRequestStatusViewModel{
                RequestId = RequestUser.Id,
                SenderId = SenderUser.Id
            };
        bool checkDuplicateRequest = await centerService.CheckFriendRequestSentOrNotAsync(checkRequestModel);
        if (checkDuplicateRequest)
        {
            if (RequestUser != null && SenderUser != null)
            {
                Friends friends = new Friends
                {
                    UserIdRequest = SenderUser.Id,
                    UserIdResponse = RequestUser.Id,
                    Time_Stamp = DateTime.Now,
                    UniqueId = Guid.NewGuid().ToString().GetHashCode().ToString("x")
                };

                var result = await centerService.InsertFriendsReuqestDataAsync(friends);
                if (result > 0)
                {
                    await ToastObj.Show(new ToastModel { Title = "Success!", Content = "Your profile have been updated successfully.", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                    await Task.Delay(TimeSpan.FromSeconds(2));
                    navigationManager.NavigateTo("/", true);
                }
                else
                {
                    await ToastObj.Show(new ToastModel { Title = "Error!", Content = "You are sending invalid request, please try again", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                }
            }
        }
    }
}