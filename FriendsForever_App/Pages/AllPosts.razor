
<SearchNewFriends />


@if (AllPostsList.Any())
{
    foreach (var post in AllPostsList)
    {
        var postedOwnerPhoto = (post.PostedOwnerPhoto ?? "Microsoft_Default.png");
        if (post.PhotoAttached == "Attached")
        {
            var postImageCount = PostPhotoCount.FirstOrDefault(f => f.PostedId == post.PostedId);
            IEnumerable<PostImages> allPhotos = AllPhotos.Where(w => w.PostedId == post.PostedId);
            <div class="card card-cascade narrower mt-3">
            <!-- Card content -->
                <div class="card-body card-body-cascade">
                    <div class="d-flex">
                        <div class="p-1">
                            <img src="Images/ProfileImage/@postedOwnerPhoto" alt="Avatar" class="text-left rounded-circle" style="width:50px; height: 50px;">
                        </div>
                        <div class="p-1 mt-2">
                            <h4>@post.PostedOwnerName</h4>
                        </div>
                        <div class="ml-auto p-2">
                            <span class="text-right">@( DateTime.Now.Subtract(post.PostedTimeStamp).Minutes ) mins</span>
                        </div>
                    </div>
                    <hr class="bg-secondary" />
                    <p>@post.PostedContent</p>
                    <div class="scrollOptions-Post">
                        @foreach (var images in allPhotos)
                        {
                            var photoPath = (images.PostedPhoto ?? "Microsoft_Default.png");
                            string[] checkContent = photoPath.Split('.');
                            if (checkContent[checkContent.Length - 1].ToLower() == "png" || checkContent[checkContent.Length - 1].ToLower() == "jpg"
                                || checkContent[checkContent.Length - 1].ToLower() == "jpeg" || checkContent[checkContent.Length - 1].ToLower() == "gif")
                            {
                                <img src="Images/PostImages/@photoPath" style="width:100%" alt="@checkContent[0]" class="p-1">   
                            }
                            else if (checkContent[checkContent.Length - 1].ToLower() == "mp4" || checkContent[checkContent.Length - 1].ToLower() == "m4v"
                            || checkContent[checkContent.Length - 1].ToLower() == "m4v" || checkContent[checkContent.Length - 1].ToLower() == "mov")
                            {
                                <video controls>
                                    <source src="Images/PostImages/@photoPath" type="video/@checkContent[checkContent.Length - 1].ToLower()">
                                    Your browser does not support the video tag.
                                </video>
                            }
                            else if (checkContent[checkContent.Length - 1].ToLower() == "mp3" || checkContent[checkContent.Length - 1].ToLower() == "wav"
                                || checkContent[checkContent.Length - 1].ToLower() == "aac")
                            {
                                <audio controls>
                                        <source src="Images/PostImages/@photoPath" type="audio/@checkContent[checkContent.Length - 1].ToLower()">
                                    Your browser does not support the audio element.
                                </audio>
                            }
                        }
                    </div>
                    <hr class="bg-secondary" />
                    <div class="d-flex">
                        <div class="p-1">
                            <span class="mr-auto" style="font-size:16px"><i class="far fa-thumbs-up" style="color:#4834DF"></i> @post.LikesCount</span>&nbsp;&nbsp;
                        </div>
                        <div class="p-1">
                            <span class="ml-auto" style="font-size:16px"><i class="far fa-comment-alt" style="color:#4834DF"></i> @post.CommentsCount</span>
                        </div>
                    </div>
                    <div class="d-flex">
                        <div class="p-1">
                            <SfButton IsPrimary="true" OnClick="@(e => InsertLikes(post.PostedId))"><i class="fa fa-thumbs-up"></i>&nbsp;&nbsp;Like</SfButton>
                        </div>
                        <div class="p-1">
                            <SfButton IsPrimary="true" OnClick="@(e => RouteOnCommendBox(post.PostedId))"><i class="fa fa-comment"></i>&nbsp;&nbsp;Comment</SfButton>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card card-cascade narrower mt-3">
            <!-- Card content -->
                <div class="card-body card-body-cascade">
                    <div class="d-flex">
                        <div class="p-1">
                            <img src="Images/ProfileImage/@postedOwnerPhoto" alt="Avatar" class="text-left rounded-circle" style="width:50px; height: 50px;">
                        </div>
                        <div class="p-1 mt-2">
                            <h4>@post.PostedOwnerName</h4>
                        </div>
                        <div class="ml-auto p-2">
                            <span class="text-right">@( DateTime.Now.Subtract(post.PostedTimeStamp).Minutes ) mins</span>
                        </div>
                    </div>
                    <hr class="bg-secondary" />
                    <p> @post.PostedContent </p>
                    <hr class="bg-secondary" />
                    <div class="d-flex">
                        <div class="p-1">
                            <span class="mr-auto" style="font-size:16px"><i class="far fa-thumbs-up" style="color:#4834DF"></i> @post.LikesCount</span>&nbsp;&nbsp;
                        </div>
                        <div class="p-1">
                            <span class="ml-auto" style="font-size:16px"><i class="far fa-comment-alt" style="color:#4834DF"></i> @post.CommentsCount</span>
                        </div>
                    </div>
                    <div class="d-flex">
                        <div class="p-1">
                            <SfButton IsPrimary="true" OnClick="@(e => InsertLikes(post.PostedId))"><i class="fa fa-thumbs-up"></i>&nbsp;&nbsp;Like</SfButton>
                        </div>
                        <div class="p-1">
                            <SfButton IsPrimary="true" OnClick="@(e => RouteOnCommendBox(post.PostedId))"><i class="fa fa-comment"></i>&nbsp;&nbsp;Comment</SfButton>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
}
else
{
    <div class="card card-cascade narrower mt-3">
        <!-- Card content -->
        <div class="card-body card-body-cascade">
            <label class="text-info">No post available.</label>
        </div>
    </div>
}

<SfToast @ref="ToastObj" ID="toast_type">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

@code {
    SfToast ToastObj;
    public IEnumerable<PostImages> AllPhotos = new List<PostImages>();
    public List<CountPostImages> PostPhotoCount = new List<CountPostImages>();
    public IEnumerable<Post> AllPostsList = new List<Post>();
    protected override async Task OnInitializedAsync()
    {
        List<string> UserIdList = new List<string>();
        var user = await userService.GetUserDetailsAsync();
        int count = await centerService.CheckPostTableDataAsync(user.Id);
        if (count > 0)
        {
            UserIdList.Add(user.Id);
            var friendsList = await centerService.GetFriendsListByUserIdAsync(user.Id);
            if (friendsList.Count() > 0)
            {
                foreach (var friend in friendsList)
                {
                    UserIdList.Add(friend.UserIdResponse);
                }
            }
            AllPostsList = await centerService.FindPostByUserIdAsync(UserIdList);
            List<PostImages> postImagesList = new List<PostImages>();
            foreach (var post in AllPostsList)
            {
                var result = await centerService.FindPostImagesByPostIdAsync(post.PostedId);
                PostPhotoCount.Add(new CountPostImages
                {
                    PostedId = post.PostedId,
                    PostPhotoCount = result.Count()
                });
                foreach (var postImages in result)
                {
                    PostImages postImages1 = new PostImages
                    {
                        Id = postImages.Id,
                        PostedId = postImages.PostedId,
                        PostedPhoto = postImages.PostedPhoto
                    };
                    postImagesList.Add(postImages1);
                }
            }
            AllPhotos = postImagesList;
        }
    }

    async Task InsertLikes(string postId)
    {
        var user = await userService.GetUserDetailsAsync();
        var duplicateLikes = new DuplicateLikesViewModel()
        {
            userId = user.Id,
            postId = postId
        };
        var count = await centerService.CheckDuplicateLikesAsync(duplicateLikes);
        if (count > 0)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = "You have already liked it!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
        else
        {
            var newLike = new Likes
            {
                PostedId = postId,
                LikeUserId = user.Id,
                LikeTimeStamp = DateTime.Now
            };
            var result = await centerService.InsertPostLikesAsync(newLike);
            if (result > 0)
            {
                var likeUpdation = await centerService.UpdatePostMasterLikesAsync(postId);
                if (likeUpdation > 0)
                {
                    await ToastObj.Show(new ToastModel { Title = "Success!", Content = "Like updated successfully.", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                    var post = await centerService.FindPostDetailsByIdAsync(postId);
                    if (post != null)
                    {
                        foreach (var postData in AllPostsList)
                        {
                            if (postData.PostedId == post.PostedId)
                            {
                                postData.LikesCount = post.LikesCount;
                                postData.CommentsCount = post.CommentsCount;
                            }
                        }
                    }
                }
                else
                {
                    await ToastObj.Show(new ToastModel { Title = "Error!", Content = "No updation pending!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                }
            }
            else
            {
                await ToastObj.Show(new ToastModel { Title = "Error!", Content = "Invalid request, please try after sometimes!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            }
        }

        await Task.Delay(TimeSpan.FromSeconds(2));
        navigationManager.NavigateTo("/", true);
        StateHasChanged();
    }

    void RouteOnCommendBox(string postId)
    {
        navigationManager.NavigateTo(Path.Combine(nameof(CommentBox), postId), true);
    }
}
