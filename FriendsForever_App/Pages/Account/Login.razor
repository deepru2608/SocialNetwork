@layout AccountLayout
@page "/Login"
@inject ILoginService loginService
<!-- Card Regular -->
<div class="card card-cascade" style="margin-top: 30px; margin-left: 60px; margin-right: 60px">
    <div class="row">
        <div class="col-md-6 d-none d-sm-none d-md-block">
            <!-- Card image -->
            <div class="view view-cascade overlay">
                <img class="card-img-top img-fluid" style="background-size: cover; max-height:700px" 
                     src="https://source.unsplash.com/K4mSJ7kc0As/600x800" alt="Card image cap">
                <a>
                    <div class="mask rgba-white-slight"></div>
                </a>
            </div>
        </div>
        <div class="col-md-6 col-sm-12">
            <!-- Card content -->
            <div class="card-body card-body-cascade">
                <!-- Title -->
                <h4 class="card-title text-center"><strong class="border-bottom">Friends Forever Login</strong></h4>
                <EditForm Model="loginModel" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <InputText class="form-control form-control-sm" placeholder="Username" @bind-Value="loginModel.Username"></InputText>
                                    <ValidationMessage For="@(() => loginModel.Username)" style="color: red" />
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <InputText type="Password" class="form-control form-control-sm" placeholder="Password" @bind-Value="loginModel.Password"></InputText>
                                    <ValidationMessage For="@(() => loginModel.Password)" style="color: red" />
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6Lcz8uQUAAAAAMl5mtZeajPit7f6yBgqNt3uq4fE"
                                               OnSuccess="OnSuccess" OnExpired="OnExpired" />
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div class="form-group">
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" id="chk" class="custom-control-input" @bind-value="loginModel.RememberMe">
                                        <label class="custom-control-label" for="chk">Remember Me</label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-12 text-center mt-3">
                                <div class="pb-3">
                                    <SfButton IsPrimary="true">
                                        <i class="fas fa-sign-in-alt"></i>&nbsp;Sign in
                                    </SfButton>
                                    &nbsp;<img src="Images/BlockLoader.gif" style="height: 30px; width: 30px; display: @Loader" />
                                    <br />
                                </div>
                                <strong><a href="#" data-toggle="modal" data-target="#staticBackdrop" style="color: #3C40C6">Forgot Password</a> </strong>
                            </div>
                            <div class="form-group row text-center mt-3">
                                <div class="col-md-6 col-lg-12">
                                    Don't have an account !
                                    <strong><a href="Register" style="color: #3C40C6">Sign Up Here</a></strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<!-- Card Regular -->

<SfToast @ref="ToastObj" ID="toast_type_login">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

@code {
    SfToast ToastObj;
    public ReCAPTCHA reCAPTCHAComponent;
    public bool ValidReCAPTCHA = false;

    public LoginViewModel loginModel { get; set; }
    public string Loader { get; set; }

    public bool ServerVerificatiing = false;

    public bool DisablePostButton => !ValidReCAPTCHA || ServerVerificatiing;

    protected void OnSuccess()
    {
        ValidReCAPTCHA = true;
    }

    protected void OnExpired()
    {
        ValidReCAPTCHA = false;
    }

    protected override void OnInitialized()
    {
        loginModel = new LoginViewModel();
        Loader = "none";
    }

    protected async Task LoginUser()
    {
        if (ValidReCAPTCHA)
        {
            var response = await reCAPTCHAComponent.GetResponseAsync();
            try
            {
                Loader = "inline";
                ServerVerificatiing = true;
                StateHasChanged();
                SampleAPIArgs args = new SampleAPIArgs
                {
                    reCAPTCHAResponse = response
                };
                var captchaResponse = await captchaService.GetCaptchaVerification(args);
                if (captchaResponse == "success")
                {
                    if (!string.IsNullOrEmpty(loginModel.Username) && !string.IsNullOrEmpty(loginModel.Password))
                    {
                        var userToken = await userService.LoginUserAsync(loginModel);
                        if (userToken.Status.ToLower() == "success")
                        {
                            Loader = "none";
                            await loginService.Login(userToken.Token);
                            await ToastObj.Show(new ToastModel { Title = "Error!", Content = userToken.Status, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            await Task.Delay(TimeSpan.FromSeconds(2));
                            navigationManager.NavigateTo("/", true);
                        }
                        else
                        {
                            Loader = "none";
                            await ToastObj.Show(new ToastModel { Title = "Error!", Content = userToken.Status, CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                            await Task.Delay(TimeSpan.FromSeconds(2));
                            navigationManager.NavigateTo("Login", true);
                        }                        
                    }
                    else
                    {
                        await ToastObj.Show(new ToastModel { Title = "Error!", Content = "Please fill all the details!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                        await Task.Delay(TimeSpan.FromSeconds(2));
                        navigationManager.NavigateTo("Login", true);    
                    }
                }
                else
                {
                    await ToastObj.Show(new ToastModel { Title = "Error!", Content = "Captcha has been expired, please reload the page!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                    await Task.Delay(TimeSpan.FromSeconds(2));
                    navigationManager.NavigateTo("Login", true);
                }
            }
            catch (HttpRequestException e)
            {
                Loader = "none";
                await ToastObj.Show(new ToastModel { Title = "Error!", Content = $"{e.Message} or Reload the page!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                await Task.Delay(TimeSpan.FromSeconds(2));
                ServerVerificatiing = false;
                navigationManager.NavigateTo("Login", true);
            }
        }
    }
}
